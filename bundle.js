(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Rectangle_1 = require("./Rectangle");
var Grid = (function () {
    function Grid(block_size, color, lineWidth) {
        if (color === void 0) { color = "blue"; }
        if (lineWidth === void 0) { lineWidth = 2; }
        this.blockSize = block_size;
        this.color = color;
        this.lineWidth = lineWidth;
        this.lastX = 0;
        this.lastY = 0;
        this.cells = new Array();
    }
    Grid.prototype.generate = function (maxX, maxY) {
        var horizontalBlocks = maxX / this.blockSize;
        var verticalBlocks = maxY / this.blockSize;
        // The gridSize should be the smaller of the two
        this.gridSize = Math.round((horizontalBlocks > verticalBlocks ? verticalBlocks : horizontalBlocks));
        var blocksToDraw = (this.gridSize * this.gridSize);
        var blockCount = 0;
        while (blockCount < blocksToDraw) {
            this.cells.push(new Rectangle_1.Rectangle(this.lastX, this.lastY, this.blockSize, this.blockSize));
            if (this.currentBlockRight > this.totalGridSize) {
                this.lastY += this.blockSize;
                this.lastX = 0;
            }
            else
                this.lastX += this.blockSize + this.lineWidth;
            blockCount++;
        }
        return this.cells;
    };
    Grid.prototype.draw = function (ctx, maxX, maxY) {
        var _this = this;
        ctx.lineWidth = 1;
        ctx.strokeStyle = this.color;
        if (this.cells) {
            this.cells.forEach(function (cell) {
                _this.drawGridBlock(ctx, cell);
            });
        }
    };
    Grid.prototype.drawGridBlock = function (ctx, block) {
        ctx.strokeRect(block.x, block.y, block.width, block.height);
    };
    Object.defineProperty(Grid.prototype, "totalGridSize", {
        get: function () {
            return (this.gridSize * this.blockSize);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Grid.prototype, "currentBlockRight", {
        get: function () {
            return ((this.lastX + this.lineWidth) + this.blockSize);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Grid.prototype, "currentBlockBottom", {
        get: function () {
            return (this.lastY + this.lineWidth) + this.blockSize;
        },
        enumerable: true,
        configurable: true
    });
    return Grid;
}());
exports.Grid = Grid;
},{"./Rectangle":2}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Rectangle = (function () {
    function Rectangle(x, y, width, height, color, lineWidth) {
        if (color === void 0) { color = "white"; }
        if (lineWidth === void 0) { lineWidth = 3; }
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
        this.color = color;
        this.lineWidth = lineWidth;
    }
    Rectangle.prototype.draw = function (ctx, maxX, maxY) {
        this.scrollLeft(maxX);
        ctx.fillStyle = this.color;
        ctx.fillRect(this.x, this.y, this.width, this.height);
    };
    Rectangle.prototype.scrollLeft = function (wrapX) {
        this.x = this.x - this.width;
        if ((this.x + this.width) <= 0)
            this.x = wrapX;
    };
    return Rectangle;
}());
exports.Rectangle = Rectangle;
},{}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Rectangle_1 = require("./Rectangle");
var Snake = (function () {
    function Snake(grid) {
        this.grid = grid;
        this.snakeCells = new Array();
        this.snakeCells.push(this.cloneCell(this.grid[0]));
        this.snakeCells.push(this.cloneCell(this.grid[1]));
        this.snakeCells.push(this.cloneCell(this.grid[2]));
    }
    Snake.prototype.cloneCell = function (original) {
        return new Rectangle_1.Rectangle(original.x, original.y, original.width, original.height);
    };
    Snake.prototype.draw = function (ctx, maxX, maxY) {
        var _this = this;
        ctx.fillStyle = "red";
        for (var i = 0; i < this.snakeCells.length; i++) {
            ctx.fillRect(this.snakeCells[i].x, this.snakeCells[i].y, this.snakeCells[i].width, this.snakeCells[i].height);
            switch (this.direction) {
                case "left": {
                    // Move the snake cell to the previous x-cell in the grid
                    this.snakeCells[i].y = this.snakeCells[0].y; // Re-align and follow the head
                    var leftCells = this.grid.filter(function (gc) { return gc.y == _this.snakeCells[i].y && gc.x < _this.snakeCells[i].x; });
                    var leftGridCellIndex = this.searchClosestGridCellIndex(this.snakeCells[i].x, leftCells);
                    if ((leftGridCellIndex < 0) || leftCells[leftGridCellIndex].x == this.snakeCells[i].x) {
                        var rightCells = this.grid.filter(function (gc) { return gc.y == _this.snakeCells[i].y && gc.x > _this.snakeCells[i].x; });
                        this.snakeCells[i].x = rightCells[rightCells.length - 1].x;
                    }
                    else
                        this.snakeCells[i].x = leftCells[leftGridCellIndex].x; //this.getNextLeftGridCell(this.snakeCells[i].x, this.snakeCells[i].y).x;
                    break;
                }
                case "right": {
                    // Move the snake cell to the next x-cell in the grid
                    this.snakeCells[i].y = this.snakeCells[this.snakeCells.length - 1].y; // Re-align and follow the head
                    var rightCells = this.grid.filter(function (gc) { return gc.y == _this.snakeCells[i].y && gc.x > _this.snakeCells[i].x; });
                    var rightGridCellIndex = this.searchClosestGridCellIndex(this.snakeCells[i].x, rightCells);
                    if ((rightGridCellIndex < 0) || rightCells[rightGridCellIndex].x == this.snakeCells[i].x) {
                        var leftCells = this.grid.filter(function (gc) { return gc.y == _this.snakeCells[i].y && gc.x < _this.snakeCells[i].x; });
                        this.snakeCells[i].x = leftCells[0].x;
                    }
                    else
                        this.snakeCells[i].x = rightCells[rightGridCellIndex].x; //this.getNextLeftGridCell(this.snakeCells[i].x, this.snakeCells[i].y).x;
                    break;
                }
                case "up": {
                    // Move the snake cell to the previous y-cell in the grid
                    this.snakeCells[i].x = this.snakeCells[0].x; // re-align and follow the head
                    var topCells = this.grid.filter(function (gc) { return gc.y < _this.snakeCells[i].y && gc.x == _this.snakeCells[i].x; });
                    var topGridCellIndex = this.searchClosestGridCellIndex(this.snakeCells[i].y, topCells);
                    if ((topGridCellIndex < 0) || topCells[topGridCellIndex].y == this.snakeCells[i].y) {
                        // We need to switch direction
                        var bottomCells = this.grid.filter(function (gc) { return gc.y > _this.snakeCells[i].y && gc.x == _this.snakeCells[i].x; });
                        this.snakeCells[i].y = bottomCells[bottomCells.length - 1].y;
                    }
                    else
                        this.snakeCells[i].y = topCells[topGridCellIndex].y;
                    break;
                }
                default: {
                }
            }
        }
    };
    // Find the closest grid cell from our current x position
    Snake.prototype.searchClosestGridCellIndex = function (currentX, gridArray) {
        if (gridArray.length == 0)
            return -1;
        var currentIndex = 0; // number = gridArray[0].x;
        var currentValue = gridArray[0].x;
        for (var i = 0; i < gridArray.length; i++) {
            if (Math.abs(gridArray[currentIndex].x - gridArray[i].x) < Math.abs(currentX - gridArray[currentIndex].x))
                currentIndex = i;
        }
        ;
        return currentIndex;
    };
    return Snake;
}());
exports.Snake = Snake;
},{"./Rectangle":2}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Grid_1 = require("./Grid");
var Snake_1 = require("./Snake");
var Rectangle_1 = require("./Rectangle");
var canvas;
var ctx;
var grid = new Grid_1.Grid(20);
var snake;
var rect;
var canvasWidth = 1280;
var canvasHeight = 720;
var drawGrid = false;
function gameLoop() {
    var interval = setInterval(function () {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.fillStyle = "black";
        ctx.fillRect(0, 0, canvasWidth, canvasHeight);
        //rect.draw(ctx, 1280, 720);
        if (drawGrid)
            grid.draw(ctx, canvasWidth, canvasHeight);
        snake.draw(ctx, canvasWidth, canvasHeight);
    }, 100);
}
window.onload = function () {
    canvas = document.getElementById('cnvs');
    ctx = canvas.getContext("2d");
    var gridCells = grid.generate(canvasWidth, canvasHeight);
    snake = new Snake_1.Snake(gridCells);
    rect = new Rectangle_1.Rectangle(100, 100, 50, 50, "blue");
    document.addEventListener("keydown", function (e) {
        switch (e.which) {
            case 37: {
                snake.direction = "left";
                break;
            }
            case 38: {
                snake.direction = "up";
                break;
            }
            case 39: {
                snake.direction = "right";
                break;
            }
            case 40: {
                snake.direction = "down";
                break;
            }
            case 32: {
                toggleDebugMode();
                break;
            }
        }
    });
    requestAnimationFrame(gameLoop);
};
function toggleDebugMode() {
    drawGrid = (!drawGrid);
}
},{"./Grid":1,"./Rectangle":2,"./Snake":3}]},{},[4])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
