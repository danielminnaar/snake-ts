(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Rectangle_1 = require("./Rectangle");
var Grid = (function () {
    function Grid(block_size, color, lineWidth) {
        if (color === void 0) { color = "blue"; }
        if (lineWidth === void 0) { lineWidth = 2; }
        this.blockSize = block_size;
        this.color = color;
        this.lineWidth = lineWidth;
        this.lastX = 0;
        this.lastY = 0;
        this.cells = new Array();
    }
    Grid.prototype.generate = function (maxX, maxY) {
        var horizontalBlocks = maxX / this.blockSize;
        var verticalBlocks = maxY / this.blockSize;
        // The gridSize should be the smaller of the two
        this.gridSize = Math.round((horizontalBlocks > verticalBlocks ? verticalBlocks : horizontalBlocks));
        var blocksToDraw = (this.gridSize * this.gridSize);
        var blockCount = 0;
        while (blockCount < blocksToDraw) {
            this.cells.push(new Rectangle_1.Rectangle(this.lastX, this.lastY, this.blockSize, this.blockSize));
            if (this.currentBlockRight > this.totalGridSize) {
                this.lastY += this.blockSize;
                this.lastX = 0;
            }
            else
                this.lastX += this.blockSize + this.lineWidth;
            blockCount++;
        }
        return this.cells;
    };
    Grid.prototype.draw = function (ctx, maxX, maxY) {
        var _this = this;
        ctx.lineWidth = 1;
        ctx.strokeStyle = this.color;
        if (this.cells) {
            this.cells.forEach(function (cell) {
                _this.drawGridBlock(ctx, cell);
            });
        }
    };
    Grid.prototype.drawGridBlock = function (ctx, block) {
        ctx.strokeRect(block.x, block.y, block.width, block.height);
    };
    Object.defineProperty(Grid.prototype, "totalGridSize", {
        get: function () {
            return (this.gridSize * this.blockSize);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Grid.prototype, "currentBlockRight", {
        get: function () {
            return ((this.lastX + this.lineWidth) + this.blockSize);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Grid.prototype, "currentBlockBottom", {
        get: function () {
            return (this.lastY + this.lineWidth) + this.blockSize;
        },
        enumerable: true,
        configurable: true
    });
    return Grid;
}());
exports.Grid = Grid;
},{"./Rectangle":2}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Rectangle = (function () {
    function Rectangle(x, y, width, height, color, lineWidth) {
        if (color === void 0) { color = "white"; }
        if (lineWidth === void 0) { lineWidth = 3; }
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
        this.color = color;
        this.lineWidth = lineWidth;
    }
    Rectangle.prototype.draw = function (ctx, maxX, maxY) {
        this.scrollLeft(maxX);
        ctx.fillStyle = this.color;
        ctx.fillRect(this.x, this.y, this.width, this.height);
    };
    Rectangle.prototype.scrollLeft = function (wrapX) {
        this.x = this.x - this.width;
        if ((this.x + this.width) <= 0)
            this.x = wrapX;
    };
    return Rectangle;
}());
exports.Rectangle = Rectangle;
},{}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Snake = (function () {
    function Snake(grid) {
        this.direction = "left";
        this.grid = grid;
        this.snakeCells = new Array();
        this.snakeCells.push(this.grid[0]);
        this.snakeCells.push(this.grid[1]);
        this.snakeCells.push(this.grid[2]);
    }
    Snake.prototype.draw = function (ctx, maxX, maxY) {
        var _this = this;
        ctx.fillStyle = "red";
        for (var i = 0; i < this.snakeCells.length; i++) {
            ctx.fillRect(this.snakeCells[i].x, this.snakeCells[i].y, this.snakeCells[i].width, this.snakeCells[i].height);
            switch (this.direction) {
                case "left": {
                    debugger;
                    // Move the snake cell to the previous x-cell in the grid
                    var leftCells = this.grid.filter(function (gc) { return gc.y == _this.snakeCells[i].y && gc.x < _this.snakeCells[i].x; });
                    var leftGridCellIndex = this.searchClosestGridCellIndex(this.snakeCells[i].x, leftCells);
                    if ((leftGridCellIndex < 0) || leftCells[leftGridCellIndex].x == this.snakeCells[i].x) {
                        var rightCells = this.grid.filter(function (gc) { return gc.y == _this.snakeCells[i].y && gc.x > _this.snakeCells[i].x; });
                        this.snakeCells[i].x = rightCells[rightCells.length - 1].x;
                    }
                    else
                        this.snakeCells[i].x = leftCells[leftGridCellIndex].x; //this.getNextLeftGridCell(this.snakeCells[i].x, this.snakeCells[i].y).x;
                }
            }
        }
    };
    // Find the closest grid cell from our current x position
    Snake.prototype.searchClosestGridCellIndex = function (currentX, gridArray) {
        if (gridArray.length == 0)
            return -1;
        var currentIndex = 0; // number = gridArray[0].x;
        var currentValue = gridArray[0].x;
        for (var i = 0; i < gridArray.length; i++) {
            if (Math.abs(gridArray[currentIndex].x - gridArray[i].x) < Math.abs(currentX - gridArray[currentIndex].x))
                currentIndex = i;
        }
        ;
        return currentIndex;
    };
    Snake.prototype.getNextLeftGridCell = function (x, y) {
        var leftCells = this.grid.filter(function (gc) { return gc.y == y && gc.x < x; });
        if (leftCells && leftCells.length > 0) {
            // Find the closest x position in the grid
            return leftCells[0];
        }
        else {
            var rightCells = this.grid.filter(function (gc) { return gc.y == y && gc.x > x; });
            var mostRight = x;
            rightCells.forEach(function (rc) {
                if (rc.x > mostRight)
                    mostRight = rc.x;
            });
            return rightCells.filter(function (rc) { return rc.x == mostRight; })[0];
        }
    };
    return Snake;
}());
exports.Snake = Snake;
},{}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Grid_1 = require("./Grid");
var Snake_1 = require("./Snake");
var Rectangle_1 = require("./Rectangle");
var canvas;
var ctx;
var grid = new Grid_1.Grid(100);
var snake;
var rect;
function gameLoop() {
    var interval = setInterval(function () {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.fillStyle = "black";
        ctx.fillRect(0, 0, 1280, 720);
        //rect.draw(ctx, 1280, 720);
        grid.draw(ctx, 1280, 720);
        snake.draw(ctx, 1280, 720);
    }, 100);
}
window.onload = function () {
    canvas = document.getElementById('cnvs');
    ctx = canvas.getContext("2d");
    var gridCells = grid.generate(1280, 720);
    snake = new Snake_1.Snake(gridCells);
    rect = new Rectangle_1.Rectangle(100, 100, 50, 50, "blue");
    requestAnimationFrame(gameLoop);
};
},{"./Grid":1,"./Rectangle":2,"./Snake":3}]},{},[4])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
